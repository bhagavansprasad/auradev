URL
---
https://wwww.datadoghq.com/docker-adoption

Docker Networking
	https://docs.docker.com/v1.8/articles/networking/

Docker hub login
----------------
https://hub.docker.com/
uname : auranetworks
email : bhagavansprasad@gmail.com
pass  : jungo

Commands
--------
$ docker images 															--> lists all the images on your local system
$ docker tag 7d9495d03763 maryatdocker/docker-whale:latest 					--> Taging the docker image
$ docker login --username=auranetworks --email=bhagavansprasad@gmail.com	--> To login to repository
$ docker push auranetworks/myfirst-docker									--> Pushing updated docker image to repository
$ docker info
$ sudo docker rmi 5ba8a29230ec
$ sudo docker ps 															--> Lists all docker imagaes running
$ docker search ubuntu														--> searches for images in central repository
$ docker run -P -d tcp-echo --> port 5000 container and binds to random local port 32770
	0.0.0.0:32770->5000/tcp 
$ docker run -p 5000:5000 -d tcp-echo --> container binds to 5000 and mapped local port 5000
$ docker port 07bb04bf1872 
	5000/tcp -> 0.0.0.0:32770
$ docker port 07bb04bf1872  5000
	0.0.0.0:32770
$ docker logs -f sleepy_pasteur
$ docker top nostalgic_morse --> Lists all processes running in container
$ docket inspect nostalgic_morse --> Prints JSON object with contains status and configuration of the container
$ docker network ls
$ docker network inspect my-bridge-network --> Inspecting network bridge

Connecting two containers through bridge
----------------------------------------
1. Running first container with connecting bridge
   Launch second container and connect to bridge
-  Launching first container 'db'
$ docker run -d --net=my-bridge-network --name db training/postgres

- Inspecting network 'db'
$ docker inspect --format='{{json .NetworkSettings.Networks}}'  db

- Running second container 'web'
$ docker run -d --name web training/webapp python app.py

- Inspecting network 'web'
$ docker inspect --format='{{json .NetworkSettings.Networks}}'  web

- Print IP of web
$ docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' web

- Print IP of db
$ docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' db

- Open the shell of bash and ping to web, it does not ping
$ docker exec -it db bash

- Adding web to bridge
$ docker network connect my-bridge-network web

- Open the shell of bash and ping to web, it pings
$ docker exec -it db bash

2. Running both containers without connecting bridge
   Connect both containers to bridge
$ docker run -d  --name db  training/postgres
$ docker run -d  --name web training/webapp python app.py
$ docker network connect my-bridge-network db
$ docker network connect my-bridge-network web

Notes
------
- .dockerignore file to that directory as well. This file supports exclusion patterns similar to .gitignore files
- Container linking
	Decoupling applications into multiple containers makes it much
	easier to scale horizontally and reuse containers. If that service depends
	on another service, make use of container linking.
- do not want to use the cache at all you can use the --no-cache=true option on the docker build

Dockerfile instructions (commands)
-------------------
- RUN
Sort multi-line arguments
Always combine RUN apt-get update with apt-get install in the same RUN statement,

- CMD - should be used to run the software contained by your image
- EXPOSE - nstruction indicates the ports on which a container will listen for connections
- ENV - use ENV to update the PATH environment variable 
- ADD & COPY - COPY is preferred. That’s because it’s more transparent than ADD
- ENTRYPOINT - 

Docker Networking
-----------------
Docker provides two network drivers for you, 'bridge' and the 'overlay driver'

installed Docker
run a software image in a container
located an interesting image on Docker Hub
run the image on your own machine
modified an image to create your own and run it
create a Docker Hub account and repository
pushed your image to Docker Hub for others to share

How build hello world container?
============Creating new container, build and RUN======================
- Create a file 'Dockerfile' with below content
  FROM ubuntu
  CMD echo 'Howdy from Code School!!!'
Descripton : 1. Create a container from 'ubuntu' image
             2. Run the command 'echo' with given message
- Build the docker container
  docker build -t code_school . 
- Run the container
  docker run code_school
- docker images lists you what containers available locally
=======================================================================

What are all other things can be done in simple with own container
============Creating new container, build and RUN======================
- Create a file 'Dockerfile' with below content
  FROM ubuntu
  RUN apt-get update
  CMD ls -ls
  EXPOSE 9999
  ENTRYPOINT ls
- Build the docker container
  docker build -t 2nd_exmp . 
- Run the container
  docker run 2nd_exmp

Note
	RUN — Run a command on the container. Used for things like installing packages, etc.
	EXPOSE — Open ports from the Docker container to the host.
	CMD — The default command to run when the container is started. Can be overridden from the command line at runtime.
	ENTRYPOINT — Similar to the CMD option in that it will be the default command that is run but this one cannot be overridden from the command line.
=======================================================================

Notes
- What is Docker Server
Docker deamon with builds and runs the container
- What is Docker client
Interact with deamon with Docker client with docket command
- List out Virtual Machine stack
	Application-A				Application-B
	Bins/libs					Bins/Libs
	Guest OS (complete)			Guest OS (complete)
	-----------------------------------------------
				Hypervisor
				Host OS
				HW
- List out Docker container stack 
	Application-A			Application-B
	Bins/Libs				Bins/Libs
	----------------------------------------
				Docker Engine
				Host OS
				HW
- What does docker containers contains
  It is just a binary files which we download and run
  Which contains application and dependencies with required to run the application
- What is docker engine?
  Docker engine is a thin layer on top of host os 
  Docker engine uses host os to run process in the container (application)
  These processes are like sandboxes/busybox which does not have any conflict between containers


=============New docker file with listining on port 80================
RUN apt-get update
RUN apt-get install -y nginx
RUN echo "daemon off" ; >> /etc/nginx/nginx.conf 
ADD index.html /usr/share/nginx/html/index.html
EXPOSE 80
ENTRYPOINT /usr/sbin/nginx

#Create new html file locally
<!DOCTYPE html>
<html>
	<head>
		<title>Code TV Static Site </title>
	</head>
	<body>
		<h1>Hi from 2nd example of docker container!</h1>
	</body>
</html>

#Build comand
$ docker build -t nginx_example .

#Run command
$ docker run -p 80:80 -d nginx_example  -->All local host requests on port 80 is redirected to container port 80

#From local browser connect to localhost, it redicts to port 80 of container
=============================================================================



docker run -d -p 8080:8080 -p 29418:29418 openfrontier/gerrit
openfrontier/gerrit   "/gerrit-entrypoint.s"   0.0.0.0:8080->8080/tcp, 0.0.0.0:29418->29418/tcp   boring_tesla

sh createGerrit.sh http://gerrit 192.168.1.253 admin 127.0.0.1 bhagavan@aura.in
openfrontier/gerrit   "/gerrit-entrypoint.s"   8080/tcp,               0.0.0.0:29418->29418/tcp   gerrit


1. Run SMTP server
	docker run --name smtpd -d namshi/smtp

2. Run 'pgsql'
	docker run --name pg-gerrit -P -e POSTGRES_USER=gerrit2 -e POSTGRES_PASSWORD=gerrit -e POSTGRES_DB=reviewdb -d postgres

3. Run to create gerrit valume
	docker run --name gerrit-volume openfrontier/gerrit 

4. Run gerrit
	docker run --name gerrit --link pg-gerrit:db -p 8080:8080 -p 29418:29418 --volumes-from gerrit-volume -e WEBURL=http://* -e HTTPD_LISTENURL=http://*:8080 -e DATABASE_TYPE=postgresql -e AUTH_TYPE=LDAP -e LDAP_SERVER=192.168.1.253 -e LDAP_ACCOUNTBASE=cn=admin,dc=devops,dc=auranetworks,dc=com  -e SMTP_SERVER=192.168.1.253 -e SMTP_USER=bhagavan -e SMTP_PASS=jnjnuh -e USER_EMAIL=bhagavan@auranetworks.in -e GERRIT_INIT_ARGS=--install-plugin=download-commands -d openfrontier/gerrit



	docker run --name gerrit --link pg-gerrit:db -p 8080:8080 -p 29418:29418 --volumes-from gerrit-volume -e WEBURL=http://* -e HTTPD_LISTENURL=http://*:8080 -e DATABASE_TYPE=postgresql -e AUTH_TYPE=LDAP -e LDAP_SERVER=192.168.1.253 -e LDAP_ACCOUNTBASE=cn=admin,dc=devops,dc=auranetworks,dc=com  -e SMTP_SERVER=192.168.1.253 -e SMTP_USER=bhagavan -e SMTP_PASS=jnjnuh -e USER_EMAIL=bhagavan@auranetworks.in -e GERRIT_INIT_ARGS=--install-plugin=download-commands -d openfrontier/gerrit


